from decimal import Decimal
from typing import Union
import datetime

from django.conf import settings
from django.core.exceptions import ValidationError
from django.db import models
import pandas as pd

from .mysunpowerhourlydata import MySunpowerHourlyData
from .realestate import Address, RealEstate
from .serviceprovider import ServiceProvider, ServiceProviderEnum
from .simpleservicebilldatabase import SimpleServiceBillDataBase


class SolarBillDataManager(models.Manager):

    def default_constructor(self):
        """ Instantiate (but don't create) SolarBillData instance with None for all attributes

        Returns:
            SolarBillData: instance
        """
        return self.full_constructor(None, None, None, None, None, None, None, None, None, None, create=False)

    def full_constructor(self, real_estate, service_provider, start_date, end_date, tax_rel_cost, solar_kwh, home_kwh,
                         actual_costs, oc_bom_basis, oc_pnl_pct, paid_date=None, notes=None, bill_file=None,
                         create=True):
        """ Instantiate SolarBillData instance with option to save to database

        see SolarBillData.calc_attributes() docstring

        Args:
            see SolarBillData class docstring
            create (bool): False to create instance only. Default True to also save to database (self.create)

        Returns:
            SolarBillData: instance
        """
        oc_pnl, total_cost, oc_eom_basis = SolarBillData.calc_attributes(oc_bom_basis, oc_pnl_pct, actual_costs)
        return (self.create if create else SolarBillData)(
            real_estate=real_estate, service_provider=service_provider, start_date=start_date, end_date=end_date,
            total_cost=total_cost, tax_rel_cost=tax_rel_cost, solar_kwh=solar_kwh, home_kwh=home_kwh,
            actual_costs=actual_costs, oc_bom_basis=oc_bom_basis, oc_pnl_pct=oc_pnl_pct, oc_pnl=oc_pnl,
            oc_eom_basis=oc_eom_basis, paid_date=paid_date, notes=notes, bill_file=bill_file)


class SolarBillData(SimpleServiceBillDataBase):
    """ Actual bill data for solar

    Costs depend on whether system was financed or purchased and any repairs/labor costs
        Financed: total cost is monthly payment to the installation company (an actual bill)
        Purchased: total cost is an opportunity cost if the funds had been invested in sp 500 total return
        Repairs/Labor: any of these costs that arise add to the monthly total cost
        Decommission: not a cost until it is performed, but removing the panels will be a cost in the future

    Attributes:
        see superclass docstring
        solar_kwh (Decimal): nonnegative kwh generated by solar system
        home_kwh (Decimal): nonnegative kwh used by home
        total_cost (Decimal): total_cost = actual_costs + oc_pnl
        actual_costs (Decimal): sum of costs (positive) or credits (negative) for the solar provider during the
            month. Examples of these are federal/state credits, solar installer rebates/credits, supply costs or
            repair/labor costs.
        oc_bom_basis (Decimal): opportunity cost beginning of month basis. First month is the purchase price,
            otherwise, same as oc_eom_basis for previous month
        oc_pnl_pct (Decimal): pnl percent for sp 500 total return over the billing period
        oc_pnl (Decimal): opportunity cost pnl = oc_bom_basis * oc_pnl_pct
        oc_eom_basis (Decimal): opportunity cost end of month basis = oc_bom_basis + actual_costs + oc_pnl
    """

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=["real_estate", "service_provider", "start_date"],
                                    name="unique_%(app_label)s_%(class)s_re_sp_sd")
        ]
        ordering = ["real_estate", "start_date"]

    # noinspection PyMethodParameters
    def file_upload_path(instance, filename):
        return "files/input/solar/" + filename

    def validate_service_provider(service_provider):
        service_provider = ServiceProvider.objects.get(pk=service_provider)
        if service_provider.provider not in SolarBillData.valid_providers():
            raise ValidationError(str(service_provider) + " is not a valid service provider")

    # noinspection PyMethodParameters
    def valid_service_providers():
        return {"provider__in": SolarBillData.valid_providers()}

    service_provider = models.ForeignKey(ServiceProvider, models.PROTECT, validators=[validate_service_provider],
                                         limit_choices_to=valid_service_providers)
    bill_file = models.FileField(blank=True, null=True, upload_to=file_upload_path)
    solar_kwh = models.DecimalField(max_digits=7, decimal_places=2)
    home_kwh = models.DecimalField(max_digits=7, decimal_places=2)
    actual_costs = models.DecimalField(max_digits=8, decimal_places=2)
    oc_bom_basis = models.DecimalField(max_digits=8, decimal_places=2)
    oc_pnl_pct = models.DecimalField(max_digits=4, decimal_places=2)
    oc_pnl = models.DecimalField(max_digits=8, decimal_places=2)
    oc_eom_basis = models.DecimalField(max_digits=8, decimal_places=2)

    objects = SolarBillDataManager()

    def __repr__(self):
        """ __repr__ override

        Format:
            super().__repr__()
            Solar KWH Production: str(self.solar_kwh), Home KWH Usage: str(self.home_kwh)
            Actual Costs: str(self.actual_costs)
            Opportunity Cost: BOM Basis: str(self.oc_bom_basis), PNL Pct: str(self.oc_pnl_pct)%, PNL: str(self.oc_pnl),
                EOM Basis: str(self.oc_eom_basis)

        Returns:
            str: as described by Format
        """
        return super().__repr__() + "\nSolar KWH Production: " + str(self.solar_kwh) + ", Home KWH Usage: " + \
            str(self.home_kwh) + "\nActual Costs: " + str(self.actual_costs) + "\nOpportunity Cost: BOM Basis: " + \
            str(self.oc_bom_basis) + ", PNL Pct: " + str(self.oc_pnl_pct) + "%, PNL: " + str(self.oc_pnl) + \
            ", EOM Basis: " + str(self.oc_eom_basis)

    def modify(self, cost_ratio=None, real_estate=None, **kwargs):
        """ see superclass docstring

        Ratio applied to all attributes except opportunity cost pnl percent.
        """
        bill_copy = super().modify(cost_ratio=cost_ratio, real_estate=real_estate, **kwargs)

        if cost_ratio is not None:
            bill_copy.solar_kwh = bill_copy.solar_kwh * cost_ratio
            bill_copy.home_kwh = bill_copy.home_kwh * cost_ratio
            bill_copy.actual_costs *= cost_ratio
            bill_copy.oc_bom_basis *= cost_ratio
            bill_copy.oc_pnl *= cost_ratio
            bill_copy.oc_eom_basis *= cost_ratio

            bill_copy.notes += " Ratio of " + str(cost_ratio) + \
                               " applied to all attributes except opportunity cost pnl percent."

        return bill_copy

    def tax_related_cost_message(self):
        return "Solar bills aren't 'real' bills so the tax related cost is set to the default."

    @classmethod
    def process_service_bill(cls, file):
        """ Open, process and return solar service bill in same format as SolarBillTemplate.csv

        Solar hourly data must be available before calling this function. See process_sunpower_hourly_file(). This
            function calls self.calculate_total_kwh_between_dates() to get solar and home kwh usage the billing period.
        This function will not work for the first bill since the beginning of the month opportunity cost basis isn't
            set. Should insert first bill directly in table.
        See SolarBillTemplate.csv in media directory /files/input/solar/:
            address: valid values found in model realestate.Address values
            provider: see self.valid_providers() then model serviceprovider.ServiceProviderEnum for valid values
            dates: YYYY-MM-DD format. start_date and end_date should match the start_date and end_date of an electric
                bill or there will be issues later
            actual costs: *.XX dollar format
            oc_pnl_pct: *.XX percent format

        Args:
            file (Union[str, django.core.files.base.File, SolarBillData]): name of file in media directory
                /files/input/solar/ or a File object or a SolarBillData instance

        Returns:
            SolarBillData: all attributes are set with bill values except paid_date, which is set to the value provided
            in the bill or None if not provided. Instance is not saved to database.

        Raises:
            ObjectDoesNotExist: if real estate, service provider, previous bill or solar hourly data not found
        """
        if isinstance(file, SolarBillData):
            start_date = file.start_date
            end_date = file.end_date
            real_estate = file.real_estate
            service_provider = file.service_provider
            actual_costs = file.actual_costs
            oc_pnl_pct = file.oc_pnl_pct
            paid_date = file.paid_date
            notes = file.notes
            bill_file = None
        else:
            start_date, end_date, file, df = cls.process_service_bill_dates(file)
            real_estate = RealEstate.objects.filter(address=Address.to_address(df.loc[0, "address"])).get()
            service_provider = ServiceProvider.objects.filter(provider=ServiceProviderEnum(df.loc[0, "provider"])).get()
            actual_costs = Decimal(str(df.loc[0, "actual_costs"]))
            oc_pnl_pct = Decimal(str(df.loc[0, "oc_pnl_pct"]))
            paid_date = df.loc[0, "paid_date"]
            paid_date = None if pd.isnull(paid_date) \
                else datetime.datetime.strptime(df.loc[0, "paid_date"], "%Y-%m-%d").date()
            notes = None if pd.isnull(df.loc[0, "notes"]) else df.loc[0, "notes"]
            bill_file = file

        kwh_dict = MySunpowerHourlyData.calculate_total_kwh_between_dates(start_date, end_date)
        prev_bill_end_date = start_date - datetime.timedelta(days=1)
        prev_bill = SolarBillData.objects.filter(
            real_estate=real_estate, service_provider=service_provider, end_date=prev_bill_end_date).get()
        oc_bom_basis = prev_bill.oc_eom_basis

        sbd = SolarBillData.objects.full_constructor(
            real_estate, service_provider, start_date, end_date, None, kwh_dict["solar_kwh"], kwh_dict["home_kwh"],
            actual_costs, oc_bom_basis, oc_pnl_pct, paid_date=paid_date, notes=notes, bill_file=bill_file, create=False)
        sbd = cls.set_default_tax_related_cost([(sbd, Decimal("NaN"))])[0]
        return sbd

    @classmethod
    def process_service_bill_dates(cls, file):
        """ Open, process and return solar service bill dates in same format as SolarBillTemplate.csv

        See SolarBillTemplate.csv in media directory /files/input/solar/
            dates: YYYY-MM-DD format

        Args:
            file (Union[str, django.core.files.base.File]): name of file in media directory /files/input/solar/ or a
                File object.

        Returns:
            (datetime.date, datetime.date, file, pd.DataFrame): three tuple of start date, end date, file object,
                bill dataframe

        Raises:
            ValueError: if required dates not found or have incorrect values or format
        """
        if isinstance(file, str):
            file = settings.MEDIA_ROOT + "/files/input/solar/" + file

        df = pd.read_csv(file)
        start_date = datetime.datetime.strptime(df.loc[0, "start_date"], "%Y-%m-%d").date()
        end_date = datetime.datetime.strptime(df.loc[0, "end_date"], "%Y-%m-%d").date()

        return start_date, end_date, file, df

    @classmethod
    def set_default_tax_related_cost(cls, bill_tax_related_cost_list):
        bill_list = []
        for bill, tax_related_cost in bill_tax_related_cost_list:
            # solar "bills" aren't real bills so default tax related cost is always 0. no need to consider whether bills
            # for the real estate in bill are typically tax related or not
            bill.tax_rel_cost = Decimal(0) if tax_related_cost.is_nan() else tax_related_cost
            bill_list.append(bill)
        return bill_list

    @classmethod
    def valid_providers(cls):
        """ Which service providers are valid for this model

        Returns:
            list[ServiceProviderEnum]: [ServiceProviderEnum.WL_10_SP]
        """
        return [ServiceProviderEnum.WL_10_SP]

    @staticmethod
    def calc_attributes(oc_bom_basis, oc_pnl_pct, actual_costs):
        """ Calculate attributes that can be calculated from other attributes

        Args:
            oc_bom_basis (Optional[Decimal]): opportunity cost beginning of month basis
            oc_pnl_pct (Optional[Decimal]): opportunity cost pnl pct gain/loss
            actual_costs (Optional[Decimal]): actual costs

        Returns: 3-tuple in the following order:
            oc_pnl (Optional[Decimal]): opportunity cost pnl = oc_bom_basis * oc_pnl_pct / 100 or None if either of
                oc_bom_basis or oc_pnl_pct are None
            total_cost (Optional[Decimal]): total_cost = actual_costs + oc_pnl or None if either of actual_costs or
                oc_pnl are None
            oc_eom_basis (Optional[Decimal]): opportunity cost end of month basis = oc_bom_basis + total_cost or None
                if either of oc_bom_basis or total_cost are None
        """
        oc_pnl = None if oc_bom_basis is None or oc_pnl_pct is None else round(oc_bom_basis * oc_pnl_pct / 100, 2)
        total_cost = None if actual_costs is None or oc_pnl is None else round(actual_costs + oc_pnl, 2)
        oc_eom_basis = None if oc_bom_basis is None or total_cost is None else round(oc_bom_basis + total_cost, 2)
        return oc_pnl, total_cost, oc_eom_basis
